<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE  mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="team">
   <!-- 팀 카운트 쿼리 -->
   <select id="count" parameterType="hashMap" resultType="int">
			select count(*)from Team t1
      left outer join Team_has_Tags t2
      on t1.Team_name = t2.Team_name 
      
      <include refid="search"/>
     
      order by Team_cr_date DESC;
   </select>

   <!-- 전체목록 불러오는 쿼리 -->
   <select id="list" parameterType="hashMap" resultType="hashMap">
   <include refid="paging_header" />
      select t1.Team_code, t1.Team_name, t1.Team_intro, t1.Team_cr_date, t2.Tags_Tag_Name from Team t1
      left outer join Team_has_Tags t2
      on t1.Team_name = t2.Team_name
      <include refid="search"/> 
       group by t1.Team_name
       order by Team_cr_date DESC
      <include refid="paging_footer" />
      
   </select>
   
   <!-- 전체목록 중 팀 태그 따로 불러옴 -->
   <select id="taglist" parameterType="hashMap" resultType="hashMap">
       select t.Team_code, t.Team_name, tag.Tags_Tag_Name from Team t inner join Team_has_Tags tag on t.Team_name = tag.Team_name;
   </select>
   
   <!-- 팀만들기 -->
   <insert id="teammake" parameterType="hashMap">  
       insert into Team (Team_name, Team_intro, Team_leader, Team_agreeChk) values (#{maketeamname}, #{teamintro}, #{usernickname}, 1);
   </insert>
   <update id="teammakeupdate" parameterType="hashMap">
      update User set Team_name = #{maketeamname}, Leader_auth = 1 where User_nickname = #{usernickname};
   </update>
   
   <!-- 팀이름 중복있나 -->
   <select id="teammakecheck" parameterType="hashMap" resultType="hashMap">
      select Team_name from Team where Team_name = #{maketeamname};
   </select>
   
   <!-- 팀이 이미 있는 유저인가 -->
   <select id="teammakecheck2" parameterType="hashMap" resultType="hashMap">
      select Team_name from User where User_nickname = #{usernickname};
   </select>
   
   <!-- 이미 팀신청을 했으면 -->
   <select id="teammakecheck3" parameterType="hashMap" resultType="hashMap">
      select Team_unaccept_member from Team_NOT_Members where Team_unaccept_member = #{usernickname};
   </select>
   
   <!-- 팀만들기에서 tag insert -->
   <insert id="taginsert" parameterType="hashMap">
         insert into Team_has_Tags (Team_name, Tags_Tag_Name) values (#{maketeamname}, #{tagarray});
   </insert>

   <!-- 태그들 불러오기 -->
   <select id="tags" parameterType="hashMap" resultType="hashMap">
      select Tag_Name from Tags;
   </select>
   
   
   
   <!-- 조건 쿼리 -->
   <!-- 유저한테 팀이 있으면 -->
   <select id="teamjoin_team" parameterType="hashMap" resultType="hashMap">
      select Team_name from User where User_nickname = #{User_nickname};
   </select>

   <!-- 팀가입 신청보내기 -->   
   <insert id="teamjoinmessage" parameterType="hashMap">
      insert into Team_NOT_Members (Team_unaccept_member, Team_name) values (#{User_nickname} , #{jointeamname});
   </insert>
   
  <!-- ===================================================================================== --> 
   
   <!-- 팀 탈퇴하기 (유저 or 원래 팀리더)-->
   <update id="teamsecession" parameterType="hashMap">
      update User set Team_name =null, Leader_auth = 0 where User_nickname = #{Usernickname};
   </update>
   
    <!-- 일반 유저는 이거 같이 삭제-->
   <delete id="teamsecessiondelete" parameterType="hashMap">
      delete from Team_Members where Team_Member = #{Usernickname};
   </delete>
   
   
   <!-- 팀멤버있나 -->
   <select id="if_Teammember" parameterType="hashMap" resultType="hashMap">
   		select Team_member from Team_Members where Team_name = #{secessionteamname};
   </select>
   
   <!-- 팀멤버없으면 그냥 팀자체 삭제됨 -->
   <delete id="teamsecession_teamleaderdelete" parameterType="hashMap">
   	delete from Team where Team_name = #{secessionteamname};
   </delete>
   
   <!-- 팀멤버 있으면 -->
   <!-- 원래 팀장은 team테이블의 team_leader null로 -->
   <update id="Teamleader_update" parameterType="hashMap">
   		update Team set Team_leader = null where Team_leader = #{Usernickname};
   </update>
   
   
   <!-- 팀리더 후보 데려와 -->
   <select id="Teamleader_candidate" parameterType="hashMap" resultType="hashMap">
   		select C.Team_member AS teamleader_candidate from 
		(select FORMAT(@rownum:=@rownum+1, 0) rowNum, A.* from 
		(select Team_member from Team_Members where Team_name = #{secessionteamname}) A, 
		(select @rownum := 0) B) C
		where rowNum = 1;
   </select>
   
   
   <!-- 팀후보 넣을거임-->
   <update id="Teamleader_update2" parameterType="hashMap">
   		update Team set Team_leader = #{teamleader_candidate} where Team_name = #{secessionteamname};
   </update>
   
   <!-- 팀멤버였던 팀후보 삭제할 거임 -->
   <delete id="Teammember_candidate_delete">
   		delete from Team_Members where Team_member = #{teamleader_candidate};
   </delete>
   
   <!-- 팀후보 유저테이블 update -->
   <update id="Teamcandidate_teamleader" parameterType="hashMap">
      update User set Team_name =#{secessionteamname}, Leader_auth = 1 where User_nickname = #{teamleader_candidate};
   </update>
   
   
   
   <!-- 조건 쿼리 -->
   <!-- 팀리더면 -->
   <select id="teamsecession_teamleader" parameterType="hashMap" resultType="String">
      select Team_leader from Team where Team_name = #{secessionteamname};
   </select>
   
   <!-- ===================================================================================== -->
   
   
   <!-- 팀모달창 -->
   <select id="teaminfo_notice"  parameterType="hashMap" resultType="hashMap">
      select Team_notice from Team where Team_name = #{teaminfo_teamname};
   </select>
   
   <select id="teaminfo_int" parameterType="hashMap" resultType="hashMap">
      select round(avg(User_Score)) TeamScore,  FORMAT(SUM(commission),0) Teampoint, sum(Sol_cnt) Sol_cnt from User where Team_name = #{teaminfo_teamname};
   </select>
   
   <select id="teaminfo_teamleader"  parameterType="hashMap" resultType="hashMap">
      select User_score,   FORMAT(commission,0) Teampoint, Email_address , User_nickname from User 
      where user_nickname in (select Team_leader from Team where Team_name = #{teaminfo_teamname});
   </select>
   
   <!-- 팀리더도 같이 불러올 것임 + 팀멤버 -->
   <select id="teaminfo_members"  parameterType="hashMap" resultType="hashMap">
      select User_nickname,  FORMAT(commission,0) Teampoint, Email_address, User_score from User where Team_name = #{teaminfo_teamname} and not Leader_auth = 1;
   </select>
   
   <!-- 클릭한 팀의 이름 -->
   
   
   
   <sql id="search">
      <choose>
            <when test="search_option == 'all' ">
               where 1=1
               and (t1.Team_name like CONCAT('%', #{keyword}, '%')
                  or t1.Team_intro like CONCAT('%', #{keyword}, '%')
                  or t2.Tags_Tag_Name like CONCAT ('%', #{keyword} ,'%'))
            </when>
            <when test="search_option == 'Teamname'">
               where 1=1 and t1.Team_name like CONCAT('%', #{keyword}, '%')
            </when>
             <when test="search_option == 'tagname'">
               where 1=1 and t2.Tags_Tag_Name like CONCAT ('%', #{keyword} ,'%')
            </when>
         </choose>
   </sql>
   
   <sql id="paging_header">
		select *
		from(
			select @ROWNUM:=@ROWNUM+1 as rn, A.* 
			from(
	</sql>
	<sql id="paging_footer">
		) A
	where (@rownum:=0)=0 ) rn 
	where rn between #{start} and #{end}
  </sql>

	
	
	
   
</mapper>